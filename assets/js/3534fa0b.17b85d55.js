"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[441],{43190:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=s(85893),r=s(11151);const i={title:"User Interface - Stats Counter",tags:["ui"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501978/12B6CE-image-75.jpg"},a=void 0,o={id:"tutorials/ui-elements-stats-counter",title:"User Interface - Stats Counter",description:"How to use buttons, progress bars and interact with elements. See the full scene.",source:"@site/docs/tutorials/ui-elements-stats-counter.md",sourceDirName:"tutorials",slug:"/tutorials/ui-elements-stats-counter",permalink:"/tutorials/ui-elements-stats-counter",draft:!1,unlisted:!1,editUrl:"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/ui-elements-stats-counter.md",tags:[{label:"ui",permalink:"/tags/ui"}],version:"current",frontMatter:{title:"User Interface - Stats Counter",tags:["ui"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501978/12B6CE-image-75.jpg"},sidebar:"tutorialsSidebar",previous:{title:"User Interface - Progress Bar",permalink:"/tutorials/ui-elements-progress"},next:{title:"User Interface - Text Input",permalink:"/tutorials/ui-text-input"}},l={},c=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Screen setup",id:"screen-setup",level:2},{value:"Stats setup",id:"stats-setup",level:2},{value:"Scripts",id:"scripts",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:"iframe-container",children:(0,n.jsx)("iframe",{loading:"lazy",src:"https://playcanv.as/p/XVLr9TWc/",title:"User Interface - Stats Counter"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["How to use buttons, progress bars and interact with elements. See the ",(0,n.jsx)(t.a,{href:"https://playcanvas.com/editor/scene/547905",children:"full scene"}),"."]})}),"\n",(0,n.jsxs)(t.p,{children:["In this tutorial we are going to use the built-in ",(0,n.jsx)(t.a,{href:"/user-manual/user-interface/elements/",children:"Elements"})," to create a few simple widgets that allow you to increase a stat by clicking on plus / minus buttons."]}),"\n",(0,n.jsx)(t.p,{children:"For each stat we need a minus button, a plus button, a progress bar and some text to show the current stat value."}),"\n",(0,n.jsx)(t.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsx)(t.p,{children:"This is what our UI looks like in the Hierarchy:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/images/tutorials/ui/stats/hierarchy.png",alt:"Hierarchy"})}),"\n",(0,n.jsx)(t.h2,{id:"screen-setup",children:"Screen setup"}),"\n",(0,n.jsxs)(t.p,{children:["First we start by adding a new 2D ",(0,n.jsx)(t.a,{href:"/user-manual/user-interface/screens/",children:"Screen"}),". This is what our Screen looks like:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/images/tutorials/ui/stats/screen.png",alt:"Screen"})}),"\n",(0,n.jsx)(t.p,{children:"Since it's a 2D screen we have ticked Screen Space. Our Reference Resolution is the resolution that we are targeting - in this case it's 1080 x 1920. We choose Blend for Scale Mode so that our Screen adapts to resolution changes and we set Scale Blend to 1 so that the Screen will adapt only to height changes."}),"\n",(0,n.jsx)(t.h2,{id:"stats-setup",children:"Stats setup"}),"\n",(0,n.jsx)(t.p,{children:"For each stat we will create a different Group Element. This allows us to treat sub-elements of the Group to be anchored to the Group edges and allows us to treat each stat as a separate widget."}),"\n",(0,n.jsxs)(t.p,{children:["We will only examine the Boost stat - the others are exactly the same. This is that the ",(0,n.jsx)(t.code,{children:"stats-boost"})," Entity looks like in the viewport:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/images/tutorials/ui/stats/boost-editor.png",alt:"Boost"})}),"\n",(0,n.jsx)(t.p,{children:"And these are its attributes:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/images/tutorials/ui/stats/boost-attributes.png",alt:"Boost Attributes"})}),"\n",(0,n.jsxs)(t.p,{children:["As you can see it has a Group Element component with the appropriate size to contain all our elements and it's anchored to the bottom of the screen. It also has a Script Component with the script ",(0,n.jsx)(t.code,{children:"uiStats"})," assigned to it. This script will allow us to handle interactions with the Elements of the group."]}),"\n",(0,n.jsx)(t.p,{children:"This is what our group looks like in the Hierarchy:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/images/tutorials/ui/stats/boost-hierarchy.png",alt:"Boost Hierarchy"})}),"\n",(0,n.jsx)(t.p,{children:"Our group has the following child Elements:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"text-title"}),": A Text Element for the title of the group - anchored to the top of the group."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"btn-minus"}),": An Image Element that has a child Text Element. This is our minus button and it's anchored to the bottom left of the group."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"btn-plus"}),": An Image Element that has a child Text Element. This is our plus button and it's anchored to the bottom right of the group."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"progress-bar"}),": Our progress bar anchored to the bottom of the Group. This is an Image Element for the background of the progress bar and it has 2 child Elements:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"image-progress"}),": The resizable Image Element that actually displays progress. Anchored to the left of the ",(0,n.jsx)(t.code,{children:"progress-bar"})," Element."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"text"}),": The Text Element that displays our stats. Anchored to the center of the ",(0,n.jsx)(t.code,{children:"progress-bar"})," Element."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"scripts",children:"Scripts"}),"\n",(0,n.jsxs)(t.p,{children:["We have a script on each button to allow us to change their texture based on hover states. This is similar to the script found in ",(0,n.jsx)(t.a,{href:"/tutorials/ui-elements-buttons/",children:"this tutorial"}),". We also have a script to handle our progress bar. There is more info on progress bars in ",(0,n.jsx)(t.a,{href:"/tutorials/ui-elements-progress/",children:"this tutorial"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The main script that handles the interactions for each stat is ",(0,n.jsx)(t.code,{children:"uiStats"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"var UiStats = pc.createScript('uiStats');\n\nUiStats.prototype.initialize = function() {\n    // find our widgets\n    this.btnPlus = this.entity.findByName('btn-plus');\n    this.btnMinus = this.entity.findByName('btn-minus');\n    this.progressBar = this.entity.findByName('progress-bar');\n    this.progressText = this.progressBar.findByName('text');\n\n    // initialize value to 0\n    this.setValue(0);\n\n    // increase value with plus button\n    this.btnPlus.element.on('click', function (evt) {\n        this.setValue(this.value + 1);\n    }, this);\n\n    // decrease value with minus button\n    this.btnMinus.element.on('click', function (evt) {\n        this.setValue(this.value - 1);\n    }, this);\n};\n\n// Sets the stat value\nUiStats.prototype.setValue = function (value) {\n    // clamp between min and max\n    this.value = pc.math.clamp(value, 0, 10);\n    // set progress\n    this.progressBar.script.progressBar.setProgress(this.value / 10);\n    // update progress text\n    this.progressText.element.text = this.value + ' / ' + 10;\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:"In this script we find our child elements and when the plus or minus buttons are clicked we increase / decrease the stat and update the progress bar and its text."})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>a});var n=s(67294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);