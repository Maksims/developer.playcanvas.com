"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[6933],{23832:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>n,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(85893),i=t(11151);const a={title:"Sprite",sidebar_position:13},n=void 0,l={id:"user-manual/assets/sprites",title:"Sprite",description:"A Sprite is a 2D graphic that can be rendered into Scene. A Sprite Asset is a reference to a Texture Atlas and a sequence of frames from that atlas. In this way a sprite can either represent a single image (taken out of the atlas) or a flip-book style animation (multiple frames from the atlas).",source:"@site/docs/user-manual/assets/sprites.md",sourceDirName:"user-manual/assets",slug:"/user-manual/assets/sprites",permalink:"/user-manual/assets/sprites",draft:!1,unlisted:!1,editUrl:"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/assets/sprites.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Sprite",sidebar_position:13},sidebar:"userManualSidebar",previous:{title:"Shader",permalink:"/user-manual/assets/shader"},next:{title:"Template",permalink:"/user-manual/assets/templates"}},o={},d=[{value:"Properties",id:"properties",level:2},{value:"Pixels Per Unit",id:"pixels-per-unit",level:3},{value:"Render Mode",id:"render-mode",level:3},{value:"Texture Atlas",id:"texture-atlas",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["A Sprite is a 2D graphic that can be rendered into Scene. A Sprite Asset is a reference to a ",(0,r.jsx)(s.a,{href:"/user-manual/assets/texture-atlas",children:"Texture Atlas"})," and a sequence of frames from that atlas. In this way a sprite can either represent a single image (taken out of the atlas) or a flip-book style animation (multiple frames from the atlas)."]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"/images/user-manual/assets/sprites/sprites.jpg",alt:"Sprites"})}),"\n",(0,r.jsx)(s.h3,{id:"pixels-per-unit",children:"Pixels Per Unit"}),"\n",(0,r.jsxs)(s.p,{children:["The number of pixels in the sprite image that maps to 1 Unit in the PlayCanvas scene. e.g If ",(0,r.jsx)(s.code,{children:"pixelsPerUnit"})," is 1 and the sprite is 32x32. Then it will be 32 units across and high when rendered in the scene. By default a sprite with the ",(0,r.jsx)(s.em,{children:"Simple"})," render mode is created with ",(0,r.jsx)(s.code,{children:"pixelsPerUnit"})," set to 100. This means that a 100x100 sprite will be 1 unit wide/high in the scene."]}),"\n",(0,r.jsxs)(s.p,{children:["If you create a ",(0,r.jsx)(s.em,{children:"Sliced"})," sprite, by default it will be created with a ",(0,r.jsx)(s.code,{children:"pixelsPerUnit"})," value of 1. Because these sprites are usually used as part of a Screen Component for building user interfaces, 1 sprite pixel should map to 1 screen pixel."]}),"\n",(0,r.jsx)(s.h3,{id:"render-mode",children:"Render Mode"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Simple - the sprite does not use the border values"}),"\n",(0,r.jsxs)(s.li,{children:["Sliced - the sprite uses the border values to perform ",(0,r.jsx)(s.a,{href:"/user-manual/2D/slicing",children:"9-sliced"})," rendering by stretching."]}),"\n",(0,r.jsxs)(s.li,{children:["Tiled - the sprite uses the border values to perform ",(0,r.jsx)(s.a,{href:"/user-manual/2D/slicing",children:"9-sliced"})," rendering by tiling."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"texture-atlas",children:"Texture Atlas"}),"\n",(0,r.jsx)(s.p,{children:"The Texture Atlas asset that the sprite references"})]})}function p(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>l,a:()=>n});var r=t(67294);const i={},a=r.createContext(i);function n(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);