"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[9770],{37606:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>n,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=s(85893),a=s(11151);const i={title:"Sprite"},n=void 0,l={id:"user-manual/assets/types/sprite",title:"Sprite",description:"A Sprite is a 2D graphic that can be rendered into Scene. A Sprite Asset is a reference to a Texture Atlas and a sequence of frames from that atlas. In this way a sprite can either represent a single image (taken out of the atlas) or a flip-book style animation (multiple frames from the atlas).",source:"@site/docs/user-manual/assets/types/sprite.md",sourceDirName:"user-manual/assets/types",slug:"/user-manual/assets/types/sprite",permalink:"/user-manual/assets/types/sprite",draft:!1,unlisted:!1,editUrl:"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/assets/types/sprite.md",tags:[],version:"current",frontMatter:{title:"Sprite"},sidebar:"userManualSidebar",previous:{title:"Shader",permalink:"/user-manual/assets/types/shader"},next:{title:"Template",permalink:"/user-manual/assets/types/template"}},o={},p=[{value:"Properties",id:"properties",level:2},{value:"Pixels Per Unit",id:"pixels-per-unit",level:3},{value:"Render Mode",id:"render-mode",level:3},{value:"Texture Atlas",id:"texture-atlas",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["A Sprite is a 2D graphic that can be rendered into Scene. A Sprite Asset is a reference to a ",(0,r.jsx)(t.a,{href:"/user-manual/assets/types/texture-atlas",children:"Texture Atlas"})," and a sequence of frames from that atlas. In this way a sprite can either represent a single image (taken out of the atlas) or a flip-book style animation (multiple frames from the atlas)."]}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"/images/user-manual/assets/sprites/sprites.jpg",alt:"Sprites"})}),"\n",(0,r.jsx)(t.h3,{id:"pixels-per-unit",children:"Pixels Per Unit"}),"\n",(0,r.jsxs)(t.p,{children:["The number of pixels in the sprite image that maps to 1 Unit in the PlayCanvas scene. e.g If ",(0,r.jsx)(t.code,{children:"pixelsPerUnit"})," is 1 and the sprite is 32x32. Then it will be 32 units across and high when rendered in the scene. By default a sprite with the ",(0,r.jsx)(t.em,{children:"Simple"})," render mode is created with ",(0,r.jsx)(t.code,{children:"pixelsPerUnit"})," set to 100. This means that a 100x100 sprite will be 1 unit wide/high in the scene."]}),"\n",(0,r.jsxs)(t.p,{children:["If you create a ",(0,r.jsx)(t.em,{children:"Sliced"})," sprite, by default it will be created with a ",(0,r.jsx)(t.code,{children:"pixelsPerUnit"})," value of 1. Because these sprites are usually used as part of a Screen Component for building user interfaces, 1 sprite pixel should map to 1 screen pixel."]}),"\n",(0,r.jsx)(t.h3,{id:"render-mode",children:"Render Mode"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Simple - the sprite does not use the border values"}),"\n",(0,r.jsxs)(t.li,{children:["Sliced - the sprite uses the border values to perform ",(0,r.jsx)(t.a,{href:"/user-manual/2D/slicing",children:"9-sliced"})," rendering by stretching."]}),"\n",(0,r.jsxs)(t.li,{children:["Tiled - the sprite uses the border values to perform ",(0,r.jsx)(t.a,{href:"/user-manual/2D/slicing",children:"9-sliced"})," rendering by tiling."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"texture-atlas",children:"Texture Atlas"}),"\n",(0,r.jsx)(t.p,{children:"The Texture Atlas asset that the sprite references"})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>n});var r=s(67294);const a={},i=r.createContext(a);function n(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);